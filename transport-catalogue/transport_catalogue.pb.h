// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transport_catalogue.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_transport_5fcatalogue_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_transport_5fcatalogue_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "map_renderer.pb.h"
#include "transport_router.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_transport_5fcatalogue_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_transport_5fcatalogue_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_transport_5fcatalogue_2eproto;
namespace proto_serialization {
class Coordinates;
struct CoordinatesDefaultTypeInternal;
extern CoordinatesDefaultTypeInternal _Coordinates_default_instance_;
class Distance;
struct DistanceDefaultTypeInternal;
extern DistanceDefaultTypeInternal _Distance_default_instance_;
class Route;
struct RouteDefaultTypeInternal;
extern RouteDefaultTypeInternal _Route_default_instance_;
class Stop;
struct StopDefaultTypeInternal;
extern StopDefaultTypeInternal _Stop_default_instance_;
class TransportCatalogue;
struct TransportCatalogueDefaultTypeInternal;
extern TransportCatalogueDefaultTypeInternal _TransportCatalogue_default_instance_;
}  // namespace proto_serialization
PROTOBUF_NAMESPACE_OPEN
template<> ::proto_serialization::Coordinates* Arena::CreateMaybeMessage<::proto_serialization::Coordinates>(Arena*);
template<> ::proto_serialization::Distance* Arena::CreateMaybeMessage<::proto_serialization::Distance>(Arena*);
template<> ::proto_serialization::Route* Arena::CreateMaybeMessage<::proto_serialization::Route>(Arena*);
template<> ::proto_serialization::Stop* Arena::CreateMaybeMessage<::proto_serialization::Stop>(Arena*);
template<> ::proto_serialization::TransportCatalogue* Arena::CreateMaybeMessage<::proto_serialization::TransportCatalogue>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace proto_serialization {

// ===================================================================

class Coordinates final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto_serialization.Coordinates) */ {
 public:
  inline Coordinates() : Coordinates(nullptr) {}
  ~Coordinates() override;
  explicit PROTOBUF_CONSTEXPR Coordinates(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Coordinates(const Coordinates& from);
  Coordinates(Coordinates&& from) noexcept
    : Coordinates() {
    *this = ::std::move(from);
  }

  inline Coordinates& operator=(const Coordinates& from) {
    CopyFrom(from);
    return *this;
  }
  inline Coordinates& operator=(Coordinates&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Coordinates& default_instance() {
    return *internal_default_instance();
  }
  static inline const Coordinates* internal_default_instance() {
    return reinterpret_cast<const Coordinates*>(
               &_Coordinates_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Coordinates& a, Coordinates& b) {
    a.Swap(&b);
  }
  inline void Swap(Coordinates* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Coordinates* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Coordinates* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Coordinates>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Coordinates& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Coordinates& from) {
    Coordinates::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Coordinates* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto_serialization.Coordinates";
  }
  protected:
  explicit Coordinates(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLatFieldNumber = 1,
    kLngFieldNumber = 2,
  };
  // double lat = 1;
  void clear_lat();
  double lat() const;
  void set_lat(double value);
  private:
  double _internal_lat() const;
  void _internal_set_lat(double value);
  public:

  // double lng = 2;
  void clear_lng();
  double lng() const;
  void set_lng(double value);
  private:
  double _internal_lng() const;
  void _internal_set_lng(double value);
  public:

  // @@protoc_insertion_point(class_scope:proto_serialization.Coordinates)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double lat_;
    double lng_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// -------------------------------------------------------------------

class Stop final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto_serialization.Stop) */ {
 public:
  inline Stop() : Stop(nullptr) {}
  ~Stop() override;
  explicit PROTOBUF_CONSTEXPR Stop(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Stop(const Stop& from);
  Stop(Stop&& from) noexcept
    : Stop() {
    *this = ::std::move(from);
  }

  inline Stop& operator=(const Stop& from) {
    CopyFrom(from);
    return *this;
  }
  inline Stop& operator=(Stop&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Stop& default_instance() {
    return *internal_default_instance();
  }
  static inline const Stop* internal_default_instance() {
    return reinterpret_cast<const Stop*>(
               &_Stop_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Stop& a, Stop& b) {
    a.Swap(&b);
  }
  inline void Swap(Stop* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Stop* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Stop* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Stop>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Stop& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Stop& from) {
    Stop::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Stop* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto_serialization.Stop";
  }
  protected:
  explicit Stop(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kCoordsFieldNumber = 2,
  };
  // bytes name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .proto_serialization.Coordinates coords = 2;
  bool has_coords() const;
  private:
  bool _internal_has_coords() const;
  public:
  void clear_coords();
  const ::proto_serialization::Coordinates& coords() const;
  PROTOBUF_NODISCARD ::proto_serialization::Coordinates* release_coords();
  ::proto_serialization::Coordinates* mutable_coords();
  void set_allocated_coords(::proto_serialization::Coordinates* coords);
  private:
  const ::proto_serialization::Coordinates& _internal_coords() const;
  ::proto_serialization::Coordinates* _internal_mutable_coords();
  public:
  void unsafe_arena_set_allocated_coords(
      ::proto_serialization::Coordinates* coords);
  ::proto_serialization::Coordinates* unsafe_arena_release_coords();

  // @@protoc_insertion_point(class_scope:proto_serialization.Stop)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::proto_serialization::Coordinates* coords_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// -------------------------------------------------------------------

class Distance final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto_serialization.Distance) */ {
 public:
  inline Distance() : Distance(nullptr) {}
  ~Distance() override;
  explicit PROTOBUF_CONSTEXPR Distance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Distance(const Distance& from);
  Distance(Distance&& from) noexcept
    : Distance() {
    *this = ::std::move(from);
  }

  inline Distance& operator=(const Distance& from) {
    CopyFrom(from);
    return *this;
  }
  inline Distance& operator=(Distance&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Distance& default_instance() {
    return *internal_default_instance();
  }
  static inline const Distance* internal_default_instance() {
    return reinterpret_cast<const Distance*>(
               &_Distance_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Distance& a, Distance& b) {
    a.Swap(&b);
  }
  inline void Swap(Distance* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Distance* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Distance* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Distance>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Distance& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Distance& from) {
    Distance::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Distance* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto_serialization.Distance";
  }
  protected:
  explicit Distance(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFromFieldNumber = 1,
    kToFieldNumber = 2,
    kDistanceFieldNumber = 3,
  };
  // bytes from = 1;
  void clear_from();
  const std::string& from() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_from(ArgT0&& arg0, ArgT... args);
  std::string* mutable_from();
  PROTOBUF_NODISCARD std::string* release_from();
  void set_allocated_from(std::string* from);
  private:
  const std::string& _internal_from() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_from(const std::string& value);
  std::string* _internal_mutable_from();
  public:

  // bytes to = 2;
  void clear_to();
  const std::string& to() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_to(ArgT0&& arg0, ArgT... args);
  std::string* mutable_to();
  PROTOBUF_NODISCARD std::string* release_to();
  void set_allocated_to(std::string* to);
  private:
  const std::string& _internal_to() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_to(const std::string& value);
  std::string* _internal_mutable_to();
  public:

  // uint32 distance = 3;
  void clear_distance();
  uint32_t distance() const;
  void set_distance(uint32_t value);
  private:
  uint32_t _internal_distance() const;
  void _internal_set_distance(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:proto_serialization.Distance)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr from_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr to_;
    uint32_t distance_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// -------------------------------------------------------------------

class Route final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto_serialization.Route) */ {
 public:
  inline Route() : Route(nullptr) {}
  ~Route() override;
  explicit PROTOBUF_CONSTEXPR Route(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Route(const Route& from);
  Route(Route&& from) noexcept
    : Route() {
    *this = ::std::move(from);
  }

  inline Route& operator=(const Route& from) {
    CopyFrom(from);
    return *this;
  }
  inline Route& operator=(Route&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Route& default_instance() {
    return *internal_default_instance();
  }
  static inline const Route* internal_default_instance() {
    return reinterpret_cast<const Route*>(
               &_Route_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Route& a, Route& b) {
    a.Swap(&b);
  }
  inline void Swap(Route* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Route* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Route* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Route>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Route& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Route& from) {
    Route::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Route* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto_serialization.Route";
  }
  protected:
  explicit Route(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStopsFieldNumber = 2,
    kRouteNameFieldNumber = 1,
    kIsCircularFieldNumber = 3,
  };
  // repeated .proto_serialization.Stop stops = 2;
  int stops_size() const;
  private:
  int _internal_stops_size() const;
  public:
  void clear_stops();
  ::proto_serialization::Stop* mutable_stops(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto_serialization::Stop >*
      mutable_stops();
  private:
  const ::proto_serialization::Stop& _internal_stops(int index) const;
  ::proto_serialization::Stop* _internal_add_stops();
  public:
  const ::proto_serialization::Stop& stops(int index) const;
  ::proto_serialization::Stop* add_stops();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto_serialization::Stop >&
      stops() const;

  // bytes route_name = 1;
  void clear_route_name();
  const std::string& route_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_route_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_route_name();
  PROTOBUF_NODISCARD std::string* release_route_name();
  void set_allocated_route_name(std::string* route_name);
  private:
  const std::string& _internal_route_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_route_name(const std::string& value);
  std::string* _internal_mutable_route_name();
  public:

  // bool is_circular = 3;
  void clear_is_circular();
  bool is_circular() const;
  void set_is_circular(bool value);
  private:
  bool _internal_is_circular() const;
  void _internal_set_is_circular(bool value);
  public:

  // @@protoc_insertion_point(class_scope:proto_serialization.Route)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto_serialization::Stop > stops_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr route_name_;
    bool is_circular_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// -------------------------------------------------------------------

class TransportCatalogue final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto_serialization.TransportCatalogue) */ {
 public:
  inline TransportCatalogue() : TransportCatalogue(nullptr) {}
  ~TransportCatalogue() override;
  explicit PROTOBUF_CONSTEXPR TransportCatalogue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransportCatalogue(const TransportCatalogue& from);
  TransportCatalogue(TransportCatalogue&& from) noexcept
    : TransportCatalogue() {
    *this = ::std::move(from);
  }

  inline TransportCatalogue& operator=(const TransportCatalogue& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransportCatalogue& operator=(TransportCatalogue&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransportCatalogue& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransportCatalogue* internal_default_instance() {
    return reinterpret_cast<const TransportCatalogue*>(
               &_TransportCatalogue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(TransportCatalogue& a, TransportCatalogue& b) {
    a.Swap(&b);
  }
  inline void Swap(TransportCatalogue* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransportCatalogue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TransportCatalogue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TransportCatalogue>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TransportCatalogue& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TransportCatalogue& from) {
    TransportCatalogue::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransportCatalogue* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto_serialization.TransportCatalogue";
  }
  protected:
  explicit TransportCatalogue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStopsFieldNumber = 1,
    kRoutesFieldNumber = 2,
    kDistancesFieldNumber = 3,
    kRendererSettingsFieldNumber = 4,
    kRouterSettingsFieldNumber = 5,
  };
  // repeated .proto_serialization.Stop stops = 1;
  int stops_size() const;
  private:
  int _internal_stops_size() const;
  public:
  void clear_stops();
  ::proto_serialization::Stop* mutable_stops(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto_serialization::Stop >*
      mutable_stops();
  private:
  const ::proto_serialization::Stop& _internal_stops(int index) const;
  ::proto_serialization::Stop* _internal_add_stops();
  public:
  const ::proto_serialization::Stop& stops(int index) const;
  ::proto_serialization::Stop* add_stops();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto_serialization::Stop >&
      stops() const;

  // repeated .proto_serialization.Route routes = 2;
  int routes_size() const;
  private:
  int _internal_routes_size() const;
  public:
  void clear_routes();
  ::proto_serialization::Route* mutable_routes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto_serialization::Route >*
      mutable_routes();
  private:
  const ::proto_serialization::Route& _internal_routes(int index) const;
  ::proto_serialization::Route* _internal_add_routes();
  public:
  const ::proto_serialization::Route& routes(int index) const;
  ::proto_serialization::Route* add_routes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto_serialization::Route >&
      routes() const;

  // repeated .proto_serialization.Distance distances = 3;
  int distances_size() const;
  private:
  int _internal_distances_size() const;
  public:
  void clear_distances();
  ::proto_serialization::Distance* mutable_distances(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto_serialization::Distance >*
      mutable_distances();
  private:
  const ::proto_serialization::Distance& _internal_distances(int index) const;
  ::proto_serialization::Distance* _internal_add_distances();
  public:
  const ::proto_serialization::Distance& distances(int index) const;
  ::proto_serialization::Distance* add_distances();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto_serialization::Distance >&
      distances() const;

  // .proto_serialization.RendererSettings renderer_settings = 4;
  bool has_renderer_settings() const;
  private:
  bool _internal_has_renderer_settings() const;
  public:
  void clear_renderer_settings();
  const ::proto_serialization::RendererSettings& renderer_settings() const;
  PROTOBUF_NODISCARD ::proto_serialization::RendererSettings* release_renderer_settings();
  ::proto_serialization::RendererSettings* mutable_renderer_settings();
  void set_allocated_renderer_settings(::proto_serialization::RendererSettings* renderer_settings);
  private:
  const ::proto_serialization::RendererSettings& _internal_renderer_settings() const;
  ::proto_serialization::RendererSettings* _internal_mutable_renderer_settings();
  public:
  void unsafe_arena_set_allocated_renderer_settings(
      ::proto_serialization::RendererSettings* renderer_settings);
  ::proto_serialization::RendererSettings* unsafe_arena_release_renderer_settings();

  // .proto_serialization.RouterSettings router_settings = 5;
  bool has_router_settings() const;
  private:
  bool _internal_has_router_settings() const;
  public:
  void clear_router_settings();
  const ::proto_serialization::RouterSettings& router_settings() const;
  PROTOBUF_NODISCARD ::proto_serialization::RouterSettings* release_router_settings();
  ::proto_serialization::RouterSettings* mutable_router_settings();
  void set_allocated_router_settings(::proto_serialization::RouterSettings* router_settings);
  private:
  const ::proto_serialization::RouterSettings& _internal_router_settings() const;
  ::proto_serialization::RouterSettings* _internal_mutable_router_settings();
  public:
  void unsafe_arena_set_allocated_router_settings(
      ::proto_serialization::RouterSettings* router_settings);
  ::proto_serialization::RouterSettings* unsafe_arena_release_router_settings();

  // @@protoc_insertion_point(class_scope:proto_serialization.TransportCatalogue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto_serialization::Stop > stops_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto_serialization::Route > routes_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto_serialization::Distance > distances_;
    ::proto_serialization::RendererSettings* renderer_settings_;
    ::proto_serialization::RouterSettings* router_settings_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Coordinates

// double lat = 1;
inline void Coordinates::clear_lat() {
  _impl_.lat_ = 0;
}
inline double Coordinates::_internal_lat() const {
  return _impl_.lat_;
}
inline double Coordinates::lat() const {
  // @@protoc_insertion_point(field_get:proto_serialization.Coordinates.lat)
  return _internal_lat();
}
inline void Coordinates::_internal_set_lat(double value) {
  
  _impl_.lat_ = value;
}
inline void Coordinates::set_lat(double value) {
  _internal_set_lat(value);
  // @@protoc_insertion_point(field_set:proto_serialization.Coordinates.lat)
}

// double lng = 2;
inline void Coordinates::clear_lng() {
  _impl_.lng_ = 0;
}
inline double Coordinates::_internal_lng() const {
  return _impl_.lng_;
}
inline double Coordinates::lng() const {
  // @@protoc_insertion_point(field_get:proto_serialization.Coordinates.lng)
  return _internal_lng();
}
inline void Coordinates::_internal_set_lng(double value) {
  
  _impl_.lng_ = value;
}
inline void Coordinates::set_lng(double value) {
  _internal_set_lng(value);
  // @@protoc_insertion_point(field_set:proto_serialization.Coordinates.lng)
}

// -------------------------------------------------------------------

// Stop

// bytes name = 1;
inline void Stop::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Stop::name() const {
  // @@protoc_insertion_point(field_get:proto_serialization.Stop.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Stop::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto_serialization.Stop.name)
}
inline std::string* Stop::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:proto_serialization.Stop.name)
  return _s;
}
inline const std::string& Stop::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Stop::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Stop::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Stop::release_name() {
  // @@protoc_insertion_point(field_release:proto_serialization.Stop.name)
  return _impl_.name_.Release();
}
inline void Stop::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto_serialization.Stop.name)
}

// .proto_serialization.Coordinates coords = 2;
inline bool Stop::_internal_has_coords() const {
  return this != internal_default_instance() && _impl_.coords_ != nullptr;
}
inline bool Stop::has_coords() const {
  return _internal_has_coords();
}
inline void Stop::clear_coords() {
  if (GetArenaForAllocation() == nullptr && _impl_.coords_ != nullptr) {
    delete _impl_.coords_;
  }
  _impl_.coords_ = nullptr;
}
inline const ::proto_serialization::Coordinates& Stop::_internal_coords() const {
  const ::proto_serialization::Coordinates* p = _impl_.coords_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto_serialization::Coordinates&>(
      ::proto_serialization::_Coordinates_default_instance_);
}
inline const ::proto_serialization::Coordinates& Stop::coords() const {
  // @@protoc_insertion_point(field_get:proto_serialization.Stop.coords)
  return _internal_coords();
}
inline void Stop::unsafe_arena_set_allocated_coords(
    ::proto_serialization::Coordinates* coords) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.coords_);
  }
  _impl_.coords_ = coords;
  if (coords) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto_serialization.Stop.coords)
}
inline ::proto_serialization::Coordinates* Stop::release_coords() {
  
  ::proto_serialization::Coordinates* temp = _impl_.coords_;
  _impl_.coords_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto_serialization::Coordinates* Stop::unsafe_arena_release_coords() {
  // @@protoc_insertion_point(field_release:proto_serialization.Stop.coords)
  
  ::proto_serialization::Coordinates* temp = _impl_.coords_;
  _impl_.coords_ = nullptr;
  return temp;
}
inline ::proto_serialization::Coordinates* Stop::_internal_mutable_coords() {
  
  if (_impl_.coords_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_serialization::Coordinates>(GetArenaForAllocation());
    _impl_.coords_ = p;
  }
  return _impl_.coords_;
}
inline ::proto_serialization::Coordinates* Stop::mutable_coords() {
  ::proto_serialization::Coordinates* _msg = _internal_mutable_coords();
  // @@protoc_insertion_point(field_mutable:proto_serialization.Stop.coords)
  return _msg;
}
inline void Stop::set_allocated_coords(::proto_serialization::Coordinates* coords) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.coords_;
  }
  if (coords) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(coords);
    if (message_arena != submessage_arena) {
      coords = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, coords, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.coords_ = coords;
  // @@protoc_insertion_point(field_set_allocated:proto_serialization.Stop.coords)
}

// -------------------------------------------------------------------

// Distance

// bytes from = 1;
inline void Distance::clear_from() {
  _impl_.from_.ClearToEmpty();
}
inline const std::string& Distance::from() const {
  // @@protoc_insertion_point(field_get:proto_serialization.Distance.from)
  return _internal_from();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Distance::set_from(ArgT0&& arg0, ArgT... args) {
 
 _impl_.from_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto_serialization.Distance.from)
}
inline std::string* Distance::mutable_from() {
  std::string* _s = _internal_mutable_from();
  // @@protoc_insertion_point(field_mutable:proto_serialization.Distance.from)
  return _s;
}
inline const std::string& Distance::_internal_from() const {
  return _impl_.from_.Get();
}
inline void Distance::_internal_set_from(const std::string& value) {
  
  _impl_.from_.Set(value, GetArenaForAllocation());
}
inline std::string* Distance::_internal_mutable_from() {
  
  return _impl_.from_.Mutable(GetArenaForAllocation());
}
inline std::string* Distance::release_from() {
  // @@protoc_insertion_point(field_release:proto_serialization.Distance.from)
  return _impl_.from_.Release();
}
inline void Distance::set_allocated_from(std::string* from) {
  if (from != nullptr) {
    
  } else {
    
  }
  _impl_.from_.SetAllocated(from, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.from_.IsDefault()) {
    _impl_.from_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto_serialization.Distance.from)
}

// bytes to = 2;
inline void Distance::clear_to() {
  _impl_.to_.ClearToEmpty();
}
inline const std::string& Distance::to() const {
  // @@protoc_insertion_point(field_get:proto_serialization.Distance.to)
  return _internal_to();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Distance::set_to(ArgT0&& arg0, ArgT... args) {
 
 _impl_.to_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto_serialization.Distance.to)
}
inline std::string* Distance::mutable_to() {
  std::string* _s = _internal_mutable_to();
  // @@protoc_insertion_point(field_mutable:proto_serialization.Distance.to)
  return _s;
}
inline const std::string& Distance::_internal_to() const {
  return _impl_.to_.Get();
}
inline void Distance::_internal_set_to(const std::string& value) {
  
  _impl_.to_.Set(value, GetArenaForAllocation());
}
inline std::string* Distance::_internal_mutable_to() {
  
  return _impl_.to_.Mutable(GetArenaForAllocation());
}
inline std::string* Distance::release_to() {
  // @@protoc_insertion_point(field_release:proto_serialization.Distance.to)
  return _impl_.to_.Release();
}
inline void Distance::set_allocated_to(std::string* to) {
  if (to != nullptr) {
    
  } else {
    
  }
  _impl_.to_.SetAllocated(to, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.to_.IsDefault()) {
    _impl_.to_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto_serialization.Distance.to)
}

// uint32 distance = 3;
inline void Distance::clear_distance() {
  _impl_.distance_ = 0u;
}
inline uint32_t Distance::_internal_distance() const {
  return _impl_.distance_;
}
inline uint32_t Distance::distance() const {
  // @@protoc_insertion_point(field_get:proto_serialization.Distance.distance)
  return _internal_distance();
}
inline void Distance::_internal_set_distance(uint32_t value) {
  
  _impl_.distance_ = value;
}
inline void Distance::set_distance(uint32_t value) {
  _internal_set_distance(value);
  // @@protoc_insertion_point(field_set:proto_serialization.Distance.distance)
}

// -------------------------------------------------------------------

// Route

// bytes route_name = 1;
inline void Route::clear_route_name() {
  _impl_.route_name_.ClearToEmpty();
}
inline const std::string& Route::route_name() const {
  // @@protoc_insertion_point(field_get:proto_serialization.Route.route_name)
  return _internal_route_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Route::set_route_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.route_name_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto_serialization.Route.route_name)
}
inline std::string* Route::mutable_route_name() {
  std::string* _s = _internal_mutable_route_name();
  // @@protoc_insertion_point(field_mutable:proto_serialization.Route.route_name)
  return _s;
}
inline const std::string& Route::_internal_route_name() const {
  return _impl_.route_name_.Get();
}
inline void Route::_internal_set_route_name(const std::string& value) {
  
  _impl_.route_name_.Set(value, GetArenaForAllocation());
}
inline std::string* Route::_internal_mutable_route_name() {
  
  return _impl_.route_name_.Mutable(GetArenaForAllocation());
}
inline std::string* Route::release_route_name() {
  // @@protoc_insertion_point(field_release:proto_serialization.Route.route_name)
  return _impl_.route_name_.Release();
}
inline void Route::set_allocated_route_name(std::string* route_name) {
  if (route_name != nullptr) {
    
  } else {
    
  }
  _impl_.route_name_.SetAllocated(route_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.route_name_.IsDefault()) {
    _impl_.route_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto_serialization.Route.route_name)
}

// repeated .proto_serialization.Stop stops = 2;
inline int Route::_internal_stops_size() const {
  return _impl_.stops_.size();
}
inline int Route::stops_size() const {
  return _internal_stops_size();
}
inline void Route::clear_stops() {
  _impl_.stops_.Clear();
}
inline ::proto_serialization::Stop* Route::mutable_stops(int index) {
  // @@protoc_insertion_point(field_mutable:proto_serialization.Route.stops)
  return _impl_.stops_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto_serialization::Stop >*
Route::mutable_stops() {
  // @@protoc_insertion_point(field_mutable_list:proto_serialization.Route.stops)
  return &_impl_.stops_;
}
inline const ::proto_serialization::Stop& Route::_internal_stops(int index) const {
  return _impl_.stops_.Get(index);
}
inline const ::proto_serialization::Stop& Route::stops(int index) const {
  // @@protoc_insertion_point(field_get:proto_serialization.Route.stops)
  return _internal_stops(index);
}
inline ::proto_serialization::Stop* Route::_internal_add_stops() {
  return _impl_.stops_.Add();
}
inline ::proto_serialization::Stop* Route::add_stops() {
  ::proto_serialization::Stop* _add = _internal_add_stops();
  // @@protoc_insertion_point(field_add:proto_serialization.Route.stops)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto_serialization::Stop >&
Route::stops() const {
  // @@protoc_insertion_point(field_list:proto_serialization.Route.stops)
  return _impl_.stops_;
}

// bool is_circular = 3;
inline void Route::clear_is_circular() {
  _impl_.is_circular_ = false;
}
inline bool Route::_internal_is_circular() const {
  return _impl_.is_circular_;
}
inline bool Route::is_circular() const {
  // @@protoc_insertion_point(field_get:proto_serialization.Route.is_circular)
  return _internal_is_circular();
}
inline void Route::_internal_set_is_circular(bool value) {
  
  _impl_.is_circular_ = value;
}
inline void Route::set_is_circular(bool value) {
  _internal_set_is_circular(value);
  // @@protoc_insertion_point(field_set:proto_serialization.Route.is_circular)
}

// -------------------------------------------------------------------

// TransportCatalogue

// repeated .proto_serialization.Stop stops = 1;
inline int TransportCatalogue::_internal_stops_size() const {
  return _impl_.stops_.size();
}
inline int TransportCatalogue::stops_size() const {
  return _internal_stops_size();
}
inline void TransportCatalogue::clear_stops() {
  _impl_.stops_.Clear();
}
inline ::proto_serialization::Stop* TransportCatalogue::mutable_stops(int index) {
  // @@protoc_insertion_point(field_mutable:proto_serialization.TransportCatalogue.stops)
  return _impl_.stops_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto_serialization::Stop >*
TransportCatalogue::mutable_stops() {
  // @@protoc_insertion_point(field_mutable_list:proto_serialization.TransportCatalogue.stops)
  return &_impl_.stops_;
}
inline const ::proto_serialization::Stop& TransportCatalogue::_internal_stops(int index) const {
  return _impl_.stops_.Get(index);
}
inline const ::proto_serialization::Stop& TransportCatalogue::stops(int index) const {
  // @@protoc_insertion_point(field_get:proto_serialization.TransportCatalogue.stops)
  return _internal_stops(index);
}
inline ::proto_serialization::Stop* TransportCatalogue::_internal_add_stops() {
  return _impl_.stops_.Add();
}
inline ::proto_serialization::Stop* TransportCatalogue::add_stops() {
  ::proto_serialization::Stop* _add = _internal_add_stops();
  // @@protoc_insertion_point(field_add:proto_serialization.TransportCatalogue.stops)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto_serialization::Stop >&
TransportCatalogue::stops() const {
  // @@protoc_insertion_point(field_list:proto_serialization.TransportCatalogue.stops)
  return _impl_.stops_;
}

// repeated .proto_serialization.Route routes = 2;
inline int TransportCatalogue::_internal_routes_size() const {
  return _impl_.routes_.size();
}
inline int TransportCatalogue::routes_size() const {
  return _internal_routes_size();
}
inline void TransportCatalogue::clear_routes() {
  _impl_.routes_.Clear();
}
inline ::proto_serialization::Route* TransportCatalogue::mutable_routes(int index) {
  // @@protoc_insertion_point(field_mutable:proto_serialization.TransportCatalogue.routes)
  return _impl_.routes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto_serialization::Route >*
TransportCatalogue::mutable_routes() {
  // @@protoc_insertion_point(field_mutable_list:proto_serialization.TransportCatalogue.routes)
  return &_impl_.routes_;
}
inline const ::proto_serialization::Route& TransportCatalogue::_internal_routes(int index) const {
  return _impl_.routes_.Get(index);
}
inline const ::proto_serialization::Route& TransportCatalogue::routes(int index) const {
  // @@protoc_insertion_point(field_get:proto_serialization.TransportCatalogue.routes)
  return _internal_routes(index);
}
inline ::proto_serialization::Route* TransportCatalogue::_internal_add_routes() {
  return _impl_.routes_.Add();
}
inline ::proto_serialization::Route* TransportCatalogue::add_routes() {
  ::proto_serialization::Route* _add = _internal_add_routes();
  // @@protoc_insertion_point(field_add:proto_serialization.TransportCatalogue.routes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto_serialization::Route >&
TransportCatalogue::routes() const {
  // @@protoc_insertion_point(field_list:proto_serialization.TransportCatalogue.routes)
  return _impl_.routes_;
}

// repeated .proto_serialization.Distance distances = 3;
inline int TransportCatalogue::_internal_distances_size() const {
  return _impl_.distances_.size();
}
inline int TransportCatalogue::distances_size() const {
  return _internal_distances_size();
}
inline void TransportCatalogue::clear_distances() {
  _impl_.distances_.Clear();
}
inline ::proto_serialization::Distance* TransportCatalogue::mutable_distances(int index) {
  // @@protoc_insertion_point(field_mutable:proto_serialization.TransportCatalogue.distances)
  return _impl_.distances_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto_serialization::Distance >*
TransportCatalogue::mutable_distances() {
  // @@protoc_insertion_point(field_mutable_list:proto_serialization.TransportCatalogue.distances)
  return &_impl_.distances_;
}
inline const ::proto_serialization::Distance& TransportCatalogue::_internal_distances(int index) const {
  return _impl_.distances_.Get(index);
}
inline const ::proto_serialization::Distance& TransportCatalogue::distances(int index) const {
  // @@protoc_insertion_point(field_get:proto_serialization.TransportCatalogue.distances)
  return _internal_distances(index);
}
inline ::proto_serialization::Distance* TransportCatalogue::_internal_add_distances() {
  return _impl_.distances_.Add();
}
inline ::proto_serialization::Distance* TransportCatalogue::add_distances() {
  ::proto_serialization::Distance* _add = _internal_add_distances();
  // @@protoc_insertion_point(field_add:proto_serialization.TransportCatalogue.distances)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto_serialization::Distance >&
TransportCatalogue::distances() const {
  // @@protoc_insertion_point(field_list:proto_serialization.TransportCatalogue.distances)
  return _impl_.distances_;
}

// .proto_serialization.RendererSettings renderer_settings = 4;
inline bool TransportCatalogue::_internal_has_renderer_settings() const {
  return this != internal_default_instance() && _impl_.renderer_settings_ != nullptr;
}
inline bool TransportCatalogue::has_renderer_settings() const {
  return _internal_has_renderer_settings();
}
inline const ::proto_serialization::RendererSettings& TransportCatalogue::_internal_renderer_settings() const {
  const ::proto_serialization::RendererSettings* p = _impl_.renderer_settings_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto_serialization::RendererSettings&>(
      ::proto_serialization::_RendererSettings_default_instance_);
}
inline const ::proto_serialization::RendererSettings& TransportCatalogue::renderer_settings() const {
  // @@protoc_insertion_point(field_get:proto_serialization.TransportCatalogue.renderer_settings)
  return _internal_renderer_settings();
}
inline void TransportCatalogue::unsafe_arena_set_allocated_renderer_settings(
    ::proto_serialization::RendererSettings* renderer_settings) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.renderer_settings_);
  }
  _impl_.renderer_settings_ = renderer_settings;
  if (renderer_settings) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto_serialization.TransportCatalogue.renderer_settings)
}
inline ::proto_serialization::RendererSettings* TransportCatalogue::release_renderer_settings() {
  
  ::proto_serialization::RendererSettings* temp = _impl_.renderer_settings_;
  _impl_.renderer_settings_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto_serialization::RendererSettings* TransportCatalogue::unsafe_arena_release_renderer_settings() {
  // @@protoc_insertion_point(field_release:proto_serialization.TransportCatalogue.renderer_settings)
  
  ::proto_serialization::RendererSettings* temp = _impl_.renderer_settings_;
  _impl_.renderer_settings_ = nullptr;
  return temp;
}
inline ::proto_serialization::RendererSettings* TransportCatalogue::_internal_mutable_renderer_settings() {
  
  if (_impl_.renderer_settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_serialization::RendererSettings>(GetArenaForAllocation());
    _impl_.renderer_settings_ = p;
  }
  return _impl_.renderer_settings_;
}
inline ::proto_serialization::RendererSettings* TransportCatalogue::mutable_renderer_settings() {
  ::proto_serialization::RendererSettings* _msg = _internal_mutable_renderer_settings();
  // @@protoc_insertion_point(field_mutable:proto_serialization.TransportCatalogue.renderer_settings)
  return _msg;
}
inline void TransportCatalogue::set_allocated_renderer_settings(::proto_serialization::RendererSettings* renderer_settings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.renderer_settings_);
  }
  if (renderer_settings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(renderer_settings));
    if (message_arena != submessage_arena) {
      renderer_settings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, renderer_settings, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.renderer_settings_ = renderer_settings;
  // @@protoc_insertion_point(field_set_allocated:proto_serialization.TransportCatalogue.renderer_settings)
}

// .proto_serialization.RouterSettings router_settings = 5;
inline bool TransportCatalogue::_internal_has_router_settings() const {
  return this != internal_default_instance() && _impl_.router_settings_ != nullptr;
}
inline bool TransportCatalogue::has_router_settings() const {
  return _internal_has_router_settings();
}
inline const ::proto_serialization::RouterSettings& TransportCatalogue::_internal_router_settings() const {
  const ::proto_serialization::RouterSettings* p = _impl_.router_settings_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto_serialization::RouterSettings&>(
      ::proto_serialization::_RouterSettings_default_instance_);
}
inline const ::proto_serialization::RouterSettings& TransportCatalogue::router_settings() const {
  // @@protoc_insertion_point(field_get:proto_serialization.TransportCatalogue.router_settings)
  return _internal_router_settings();
}
inline void TransportCatalogue::unsafe_arena_set_allocated_router_settings(
    ::proto_serialization::RouterSettings* router_settings) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.router_settings_);
  }
  _impl_.router_settings_ = router_settings;
  if (router_settings) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto_serialization.TransportCatalogue.router_settings)
}
inline ::proto_serialization::RouterSettings* TransportCatalogue::release_router_settings() {
  
  ::proto_serialization::RouterSettings* temp = _impl_.router_settings_;
  _impl_.router_settings_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto_serialization::RouterSettings* TransportCatalogue::unsafe_arena_release_router_settings() {
  // @@protoc_insertion_point(field_release:proto_serialization.TransportCatalogue.router_settings)
  
  ::proto_serialization::RouterSettings* temp = _impl_.router_settings_;
  _impl_.router_settings_ = nullptr;
  return temp;
}
inline ::proto_serialization::RouterSettings* TransportCatalogue::_internal_mutable_router_settings() {
  
  if (_impl_.router_settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_serialization::RouterSettings>(GetArenaForAllocation());
    _impl_.router_settings_ = p;
  }
  return _impl_.router_settings_;
}
inline ::proto_serialization::RouterSettings* TransportCatalogue::mutable_router_settings() {
  ::proto_serialization::RouterSettings* _msg = _internal_mutable_router_settings();
  // @@protoc_insertion_point(field_mutable:proto_serialization.TransportCatalogue.router_settings)
  return _msg;
}
inline void TransportCatalogue::set_allocated_router_settings(::proto_serialization::RouterSettings* router_settings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.router_settings_);
  }
  if (router_settings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(router_settings));
    if (message_arena != submessage_arena) {
      router_settings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, router_settings, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.router_settings_ = router_settings;
  // @@protoc_insertion_point(field_set_allocated:proto_serialization.TransportCatalogue.router_settings)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_serialization

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_transport_5fcatalogue_2eproto
